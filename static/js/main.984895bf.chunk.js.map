{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","app/hooks.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["currentTodoReducer","state","action","type","defaultFilter","query","status","actions","payload","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","selectTodo","selectedTodo","className","map","todo","classNames","id","completed","title","onClick","useAppSelector","useDispatch","useSelector","TodoFilter","dispatch","onSubmit","event","preventDefault","onChange","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","unsetSelectedTodo","useState","user","setUser","useEffect","userId","selectedUser","href","email","name","App","setSelectedTodo","isLoading","setIsLoading","visibleTodos","toLowerCase","includes","todosFromAPI","setTodos","finally","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.984895bf.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Filter } from '../types/Filter';\nimport { Status } from '../types/Status';\n\ntype SetStatusAction = { type: 'filter/SETSTATUS', payload: Status };\ntype SetQueryAction = { type: 'filter/SETQUERY', payload: string };\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SETSTATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SETQUERY',\n  payload: query,\n});\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst defaultFilter: Filter = {\n  query: '',\n  status: 'all',\n};\n\nexport const actions = { setQuery, setStatus };\n\nconst filterReducer = (\n  filter: Filter = defaultFilter,\n  action: Action,\n): Filter => {\n  switch (action.type) {\n    case 'filter/SETQUERY':\n      return { ...filter, query: action.payload };\n    case 'filter/SETSTATUS':\n      return { ...filter, status: action.payload };\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","// import { getTodos } from '../api';\nimport { Filter } from '../types/Filter';\nimport { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'todo/SET';\n  payload: Todo[];\n};\n\ntype FilterTodoAction = {\n  type: 'todo/FILTER';\n  payload: Filter;\n};\n\nconst setTodos = (todos: Todo[]): SetTodoAction => ({\n  type: 'todo/SET',\n  payload: todos,\n});\n\nconst filterTodos = (filter: Filter): FilterTodoAction => ({\n  type: 'todo/FILTER',\n  payload: filter,\n});\n\ntype Action = SetTodoAction | FilterTodoAction;\n\nexport const actions = { setTodos, filterTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todo/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  selectTodo: (id: Todo) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={classNames(\n            { 'has-background-info-light': selectedTodo === todo },\n          )}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          {todo.completed\n            ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            )\n            : <td className=\"is-vcentered\" />}\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames(\n                {\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                },\n              )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => selectTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  'far',\n                  {\n                    'fa-eye': selectedTodo !== todo,\n                    'fa-eye-slash': selectedTodo === todo,\n                  },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(state => state.filter.query);\n  const dispatch = useDispatch();\n\n  const setQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  const setFilter = (event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.setStatus(event.target.value as Status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={setFilter}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          value={query}\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={setQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  todo: Todo;\n  unsetSelectedTodo: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo, unsetSelectedTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  // const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(selectedUser => setUser(selectedUser));\n    // .then(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={unsetSelectedTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              )\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  // const [todosFromAPI, setTodosFromAPI] = useState<Todo[]>();\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const todos = useAppSelector(state => state.todos);\n  const query = useAppSelector(state => state.filter.query);\n  const filter = useAppSelector(state => state.filter.status);\n  const dispatch = useDispatch();\n  const visibleTodos = todos.filter(todo => {\n    if (todo.title.toLowerCase().includes(query.toLowerCase())) {\n      switch (filter) {\n        case 'all':\n          return true;\n        case 'completed':\n          return todo.completed;\n        case 'active':\n          return !todo.completed;\n        default:\n          return false;\n      }\n    }\n\n    return false;\n  });\n\n  const setTodos = (todosAPI: Todo[] = []) => dispatch(actions.setTodos(todosAPI));\n\n  const selectTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const unsetSelectedTodo = () => {\n    setSelectedTodo(null);\n  };\n\n  useEffect(() => {\n    getTodos()\n      // .then(todosAPI => setTodosFromAPI(todosAPI))\n      .then((todosFromAPI) => setTodos(todosFromAPI))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {(!isLoading && todos.length) > 0 && (\n                <TodoList\n                  todos={visibleTodos}\n                  selectTodo={selectTodo}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} unsetSelectedTodo={unsetSelectedTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}